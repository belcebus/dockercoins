# creamos las redes
networks:
  hasher:
    internal: true
  redis:
    internal: true
  rng:
    internal: true
  webui:
    #esta publica al exterior
    internal: false
  worker:
    internal: true
#balanceadores de carga
services:
  #es un FQDN por lo que puedes poner nombres largos
  hasher:
    deploy: 
      mode: replicated
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 100M
        reservations:
          cpus: "0.1"
          memory: 100M
    expose:
        - 8080
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      test: wget -q --spider localhost:8080
      timeout: 1s
    #varios microservicios en el mismo proyecto, así que esta es la versión
    image: belcebus/dockercoins:latest-hasher
    #image: belcebus/dockercoins-hasher:latest
    networks:
      #la red que hemos creado antes
      - hasher
  redis:
    deploy: 
      mode: replicated
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 100M
        reservations:
          cpus: "0.1"
          memory: 100M
    expose:
      - 6379
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      test: redis-cli
      timeout: 1s
    image: redis:6.0.9-alpine3.12@sha256:aa31e6d2afc72d2222ed3953587197c324f615861771637a64053f9d99ba4b74
    networks:
      #la red que hemos creado antes
      - redis
    volumes:
      #redis tiene que escribir de vez en cuando en disco. La ruta la obtenemos del dockerfile de la imagen
      - redis:/data
  rng:
    deploy: 
     #DaemonSet: se despliega una vez por máquina
      mode: global
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: "0.1"
          memory: 100M
        reservations:
          cpus: "0.1"
          memory: 100M
    expose:
      - 8080
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      test: wget -q --spider localhost:8080
      timeout: 1s
    image: belcebus/dockercoins:latest-rng
    networks:
      #la red que hemos creado antes
      - rng
  webui:
    deploy: 
      mode: replicated
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 100M
        reservations:
          cpus: "0.1"
          memory: 100M
    expose:
      - 8080
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      test: curl -f localhost:8080
      timeout: 1s
    image: belcebus/dockercoins:latest-webui
    networks:
      #las interfaz web se conecta con redis para ver si hay docker coins.
      - redis
      #la red que hemos creado antes en este caso es la externa
      - webui
  worker:
    deploy: 
      mode: replicated
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 100M
        reservations:
          cpus: "0.1"
          memory: 100M
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      #comprobamos conexion con la base de datos
      test: netstat -nt | grep ESTABLISHED | grep -q 6379
      timeout: 1s
    image: belcebus/dockercoins:latest-worker
    networks:
      # necesita conectarse con hasher y redis y random number generator
      - hasher
      - redis
      - rng
      #la red que hemos creado antes
      - worker
version: '3.8'
volumes:
  redis: 
